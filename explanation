# Details Sorter

This is a Python script that allows the user to enter details (name, age, and score) and sorts them based on specific criteria. 
The script demonstrates the usage of classes, methods, and sorting in Python.

## Code Explanation

```python
from operator import itemgetter
This line imports the itemgetter function from the operator module. 
The itemgetter function will be used later to specify the sorting key for the sorted function.


class DetailsSorter:
This line defines a class called DetailsSorter that will handle the sorting of details.


    def __init__(self):
        self.details_list = []
The __init__ method is the constructor for the DetailsSorter class. 
It initializes an empty list called details_list, which will be used to store the details entered by the user.


    def add_details(self, details):
        self.details_list.append(details)
The add_details method allows adding details to the details_list. 
It takes a parameter called details, which should be a tuple containing the name, age, and score of a person. 
The method appends the details tuple to the details_list.


    def sort_details(self):
        sorted_list = sorted(self.details_list, key=itemgetter(0, 1, 2))
        return sorted_list
The sort_details method sorts the details_list based on the name, age, and score of each person. 
It uses the sorted function and specifies the sorting key using itemgetter(0, 1, 2).
This means that the sorting will be done based on the first element (name), then the second element (age), 
and finally the third element (score) of each tuple. 
The sorted list is stored in the sorted_list variable, which is then returned.

details_sorter = DetailsSorter()
An instance of the DetailsSorter class is created and assigned to the variable details_sorter.


while True:
    input_str = input("Enter Details: (Name, Age, Score) [Press Enter to end]: ")
    if not input_str:
        break
    details = tuple(input_str.split(","))
    details_sorter.add_details(details)
This code block creates a loop that continues until the user enters an empty string. 
It prompts the user to enter details in the specified format (name, age, and score). 
The input is split by comma and converted into a tuple. The add_details method of the details_sorter object is then called to add the details to the list.


sorted_details = details_sorter.sort_details()
The sort_details method of the details_sorter object is called to sort the details. 
The sorted details are assigned to the variable sorted_details.

print(sorted_details)
